## vaga
esphome:
  name: "52-d1-vaga"
  platform: ESP8266
  board: d1_mini

wifi:
  ssid: "xxxxx"
  password: "xxxxx"
  manual_ip:
    static_ip: xxxxx
    gateway: xxxxx
    subnet: 255.255.255.0
    dns1: xxxxx

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "52-d1-vaga Fallback Hotspot"
    password: "xxxxx"

#captive_portal:

#web_server:
#  port: 80
# Enable logging
logger:

# Enable Home Assistant API
api:
  password: "xxxxx"

ota:
  password: "xxxxx"


globals:
  - id: initial_zero
    type: float
    restore_value: yes
    # NOTE: make sure to align this value to the one used in "calibrate_linear" below!
    initial_value: '93415'   
  - id: auto_tare_enabled
    type: bool
    restore_value: yes
    initial_value: 'true'
  - id: auto_tare_difference
    type: float
    restore_value: yes
    initial_value: '0'


switch:
  ## Switch to enable/disable the auto tare feature
  - platform: template
    id: smart_scale_continuous_tare_enabled
    name: "Smart Scale Continuous Tare Enabled"
    lambda: |-
      return id(auto_tare_enabled);
    turn_on_action:
      - lambda: |-
          id(auto_tare_enabled) = true;
    turn_off_action:
      - lambda: |-
          id(auto_tare_enabled) = false;
  - platform: restart
    name: "Restart D1 mini vaga"
  - platform: gpio
    name: "Grinder switch"
    id: grinder_switch
    pin: D4
    inverted: True
    restore_mode: ALWAYS_OFF

binary_sensor:
  - platform: gpio
    id: tare_button
    pin:
      number: TX
      inverted: true
      mode:
        input: true
        pullup: true
    on_press: 
      - lambda: |-
          id(auto_tare_difference) = id(initial_zero) - id(smart_scale_hx711_value_raw).state;

  - platform: gpio
    id: turn_on_grinder_switch
    pin:
      number: RX
      inverted: true
      mode:
        input: true
        pullup: true
    on_press: 
      then:
        - switch.turn_off: grinder_switch

## Sensor Configuration ##
sensor:
  # template sensors from global variables
  - platform: template
    id: smart_scale_initial_zero
    internal: True
    name: "Smart Scale Initial Zero"
    lambda: |-
      return id(initial_zero);
    update_interval: 1s
    
  - platform: template
    id: smart_scale_auto_tare_difference
    internal: True
    name: "Smart Scale Auto Tare Difference"
    lambda: |-
      return id(auto_tare_difference);
    update_interval: 1s
    
  # sensors imported from home assistant
  - platform: homeassistant
    id: homeassistant_initial_zero
    internal: True
    entity_id: input_number.smart_scale_initial_zero
    on_value:
      then:
        - lambda: |-
            id(initial_zero) = x;
  
  # RAW Scale input
  - platform: hx711
    id: smart_scale_hx711_value_raw
    internal: True
    dout_pin: D5
    clk_pin: D6
    gain: 128
    unit_of_measurement: g
    accuracy_decimals: 3
    update_interval: 0.1s
#    filters:
#      - sliding_window_moving_average:
#          window_size: 3
#          send_every: 1
    on_value:
      then:
        - sensor.template.publish:
            id: smart_scale_hx711_value
            state: !lambda 'return id(smart_scale_hx711_value_raw).state;'
        - if:
            condition:
              and:
                - lambda: 'return id(auto_tare_enabled);'
                # current smart scale value is below approx. 10KG (raw value -275743) aka nobody is standing on the scale
                - lambda: 'return id(smart_scale_hx711_value).state < 0.3;'
            then:
              - if:
                  condition:
                    # current raw scale value is below expected zero value
                    - lambda: 'return id(smart_scale_hx711_value_raw).state < (id(initial_zero) - id(auto_tare_difference));'
                  then:
                    # INcrease Auto-Tare offset to slowly align real zero value with expected zero value
                    - lambda: |-
                        id(auto_tare_difference) += 5;
                  else:
                    # DEcrease Auto-Tare offset to slowly align real zero value with expected zero value
                    - lambda: |-
                        id(auto_tare_difference) -= 5;

  # Mapped value to KG
  - platform: template
    id: smart_scale_hx711_value
    name: "Smart Scale HX711 Value"
    internal: False
    filters:
      # apply auto_tare difference
      - lambda: 'return x + id(auto_tare_difference);'
      # apply rough calibration
      - calibrate_linear:
          # retrieve these values by evaluating the raw values with loads of known mass.
          - 93415 -> 0
          - 917690 -> 371
    on_value:
      then:
        - if:
            condition:
              and:
                - lambda: 'return id(smart_scale_hx711_value).state > (id(coffe_weight).state - id(coffe_offset).state);'
            then:
              - switch.turn_on: grinder_switch
    unit_of_measurement: g
    accuracy_decimals: 3
    update_interval: 0.1s

  - platform: homeassistant
    name: "coffe_offset"
    entity_id: input_number.coffe_offset
    id: coffe_offset
  - platform: homeassistant
    name: "coffe_weight"
    entity_id: input_number.coffe_weight
    id: coffe_weight

## Display
i2c:
  sda: D1
  scl: D2
  setup_priority: -100

font:
  - file: "gfonts://Roboto"
    id: my_font
    size: 20
  - file: "gfonts://Roboto"
    id: my_font2
    size: 15


display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    #reset_pin: D0
    address: 0x3C
    update_interval: 0.1s
    setup_priority: -100
    lambda: |-
      it.printf(35, 3, id(my_font), "%.2f g", id(smart_scale_hx711_value).state);
      it.printf(10, 27, id(my_font2), "DOSE=%.1f g", id(coffe_weight).state);
      it.printf(10, 45, id(my_font2), "OFFSET=%.2f g", id(coffe_offset).state);
